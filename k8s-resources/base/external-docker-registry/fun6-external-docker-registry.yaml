apiVersion: serverless.kyma-project.io/v1alpha1
kind: Function
metadata:
  creationTimestamp: null
  name: fun6-external-docker-registry
  namespace: external-docker-registry
spec:
  deps: |-
    {
      "name": "fun6-external-docker-registry",
      "version": "0.0.1",
      "dependencies": {
        "fibonacci":"1.6.10",
        "axios": "^0.21.1"
      }
    }
  env:
  - name: PUSH_EVENT_TYPE
    value: sap.kyma.custom.ready.for.fun7.v1
  - name: FIBONACCI_MIN
    value: "100"
  - name: FIBONACCI_MAX
    value: "120"
  runtime: nodejs14
  source: |-
    const fibonacci = require ('fibonacci');
    require('axios');

    module.exports = {
        main: function (event, context) {
            var dataIn = sanitizeInput(event.data)
            var payload = {
                ...dataIn,
                check_in: {
                    ...dataIn.check_in,
                    fun6: new Date(),
                },
                fibo: {
                    ...dataIn.fibo,
                    fun6: fibonacci.iterate(between(parseInt(process.env['FIBONACCI_MIN'],10),parseInt(process.env['FIBONACCI_MAX'],10)))
                }
            };
            var eventOut=event.buildResponseCloudEvent(payload.uuid,process.env['PUSH_EVENT_TYPE'],payload);
            eventOut.datacontenttype="application/json"
            event.publishCloudEvent(eventOut);
            console.log(`Payload [${payload.uuid}] pushed to ${process.env['PUSH_EVENT_TYPE']}`,payload)
            return 'OK'
        }
    }

    function between(min, max) {
        return Math.floor(Math.random() * (max - min) + min);
    }

    function sanitizeInput(input) {
        let sanitised = input;
        console.log("Type of incomming input : "+ typeof sanitised);
        if(typeof sanitised === 'string'){
            return JSON.parse(sanitised);
        }
        return sanitised;
    }
---
apiVersion: eventing.kyma-project.io/v1alpha1
kind: Subscription
metadata:
  creationTimestamp: null
  name: fun6-external-docker-registry
  namespace: external-docker-registry
spec:
  filter:
    filters:
    - eventSource:
        property: source
        type: exact
        value: ""
      eventType:
        property: type
        type: exact
        value: sap.kyma.custom.ready.for.fun6.v1
  protocol: ""
  protocolsettings: {}
  sink: http://fun6-external-docker-registry.external-docker-registry.svc.cluster.local

